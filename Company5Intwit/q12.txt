class Solution {
public:
    vector<int> findOrder(int n, vector<vector<int>>& p) {
        vector<int>adj [n];
        
            int deg[n];
        memset(deg,0,sizeof(deg));
        
        int len=p.size();
        
        for(int i=0;i<len;i++){
            deg[p[i][0]]++;
            adj[p[i][1]].push_back(p[i][0]);
        }
        
        
        queue<int>q;
        for(int i=0;i<n;i++){
            if(deg[i]==0)q.push(i);
        }
        
        vector<int>ans;
        
        while(!q.empty()){
            int f=q.front();
            // cout<<f<<endl;
            ans.push_back(f);
            if(ans.size()>n){
                return {};
            }
            q.pop();
            
            for(auto x:adj[f]){
                deg[x]--;
                if(deg[x]==0){
                    q.push(x);
                }
            }
        }
        // cout<<ans.size()<<endl;
        if(ans.size()!=n)return {};
        else return ans;
    }
};